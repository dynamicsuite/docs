Vue.component("docs-aui-alert",{template:'<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-alert title="Demo Alert" text="This is a demo alert" :show.sync="show" :closeable="true"/><p>Alerts come in the following styles:</p><aui-alert type="primary" text="primary (default)"/><aui-alert type="secondary" text="secondary"/><aui-alert type="success" text="success"/><aui-alert type="warning" text="warning"/><aui-alert type="failure" text="failure"/></template><template #notes><p>Alerts display as flex full-width by default.</p></template></docs-aui-component>',data(){return{show:!0,options:{syntax_js:"new Vue({\n  el: '#test',\n  data: {\n    show: true\n  }\n});",syntax_html:'<div id="#test">\n  <aui-alert\n    title="Demo Alert"\n    text="This is a demo alert"\n    :show.sync="show"\n    :closeable="true"\n  />\n  <p>Alerts come in the following styles:</p>\n  <aui-alert type="primary" text="primary (default)" />\n  <aui-alert type="secondary" text="secondary" />\n  <aui-alert type="success" text="success" />\n  <aui-alert type="warning" text="warning" />\n  <aui-alert type="failure" text="failure" />\n</div>',events:{"update:show(show)":'Update for "show" (sync required)',close:"When the close button is clicked (when closeable)"},slots:{default:"Any content in this slot will go in the alert message body"},props:[{prop:"type",type:"string",required:!1,default:"primary",usage:'The type of the alert determines which style class will be applied. Accepted values are: none, primary, secondary, success, warning, failure. Type "none" will not apply any additional style classes. All other types will add the type as a style class.'},{prop:"title",type:"string",required:!1,default:"null",usage:"An optional title for the alert to display above the alert message."},{prop:"text",type:"string | null",required:!1,default:"null",usage:"The body of the alert. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"show",type:"boolean | string | null",required:!1,default:"true",usage:"If the alert is shown and rendered on the DOM."},{prop:"closeable",type:"boolean",required:!1,default:"false",usage:"If the alert is closeable by the user."}]}}}});
Vue.component("docs-aui-badge",{template:'<docs-aui-component v-bind="options" class="docs-aui-badge docs-container ds-container primary"><template #examples><p>Badges come in the following styles:</p><aui-badge type="primary" text="primary (default)"/><aui-badge type="secondary" text="secondary"/><aui-badge type="success" text="success"/><aui-badge type="warning" text="warning"/><aui-badge type="failure" text="failure"/></template></docs-aui-component>',data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <p>Badges come in the following styles:</p>\n  <aui-badge type="primary" text="primary (default)" />\n  <aui-badge type="secondary" text="secondary" />\n  <aui-badge type="success" text="success" />\n  <aui-badge type="warning" text="warning" />\n  <aui-badge type="failure" text="failure" />\n</div>',slots:{default:"Any content in this slot will go in the badge body"},props:[{prop:"type",type:"string",required:!1,default:"primary",usage:'The type of the badge determines which style class will be applied. Accepted values are: none, primary, secondary, success, warning, failure. Type "none" will not apply any additional style classes. All other types will add the type as a style class.'},{prop:"text",type:"string",required:!1,default:"null",usage:"The text body of the badge. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."}]}}}});
Vue.component("docs-aui-button",{template:`<docs-aui-component v-bind="options" class="docs-aui-button docs-container ds-container primary"><template #examples><aui-button text="Demo"/><aui-button :disabled="true" text="Disabled"/><aui-button :loading="true" text="Loading"/><aui-button badge="failure" text="Failed"/><p>Buttons come in the following styles:</p><aui-button type="primary" text="primary (default)"/><aui-button type="secondary" text="secondary"/><aui-button type="success" text="success"/><aui-button type="warning" text="warning"/><aui-button type="failure" text="failure"/><div class="btn-group"><aui-button text="1"/><aui-button text="2"/><aui-button text="3"/><aui-button-drop :dropdown="{test: 'Test'}"/></div></template><template #notes><p>When running a local api, you may tie the disabled/loading state to the api's calling state. Usually the return of this API is so fast that it causes a "flashing" effect on the form. To get around this you should create a delayed overlay property on your form to initiate the disabled/loading state if an API takes longer than ~300ms.</p><p>Buttons may be grouped with a special AUI class <code>btn-group</code> to collapse all shared sides. Simply wrap your buttons in a container with the <code>btn-group</code> class.</p><p>Multiple group nesting levels are not supported.</p></template></docs-aui-component>`,data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <aui-button text="Demo" />\n  <aui-button :disabled="true" text="Disabled" />\n  <aui-button :loading="true" text="Loading" />\n  <aui-button badge="failure" text="Failed" />\n  <p>Buttons come in the following styles:</p>\n  <aui-button type="primary" text="primary (default)" />\n  <aui-button type="secondary" text="secondary" />\n  <aui-button type="success" text="success" />\n  <aui-button type="warning" text="warning" />\n  <aui-button type="failure" text="failure" />\n  <div class="btn-group">\n    <aui-button text="1" />\n    <aui-button text="2" />\n    <aui-button text="3" />\n    <aui-button-drop :dropdown="{test: \'Test\'}" />\n  </div>\n</div>',events:{click:"When the button is clicked"},slots:{default:"Any content in this slot will go in the button body"},props:[{prop:"type",type:"string",required:!1,default:"primary",usage:'The type of the button determines which style class will be applied. Accepted values are: none, primary, secondary, success, warning, failure. Type "none" will not apply any additional style classes. All other types will add the type as a style class.'},{prop:"text",type:"string",required:!1,default:"null",usage:"The text body of the button. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"disabled",type:"boolean",required:!1,default:"false",usage:"If the button is disabled and non-interactive."},{prop:"loading",type:"boolean",required:!1,default:"false",usage:"If the button is in its loading state."},{prop:"loading_text",type:"string",required:!1,default:"null",usage:"Text to display on the button when in the loading state."},{prop:"badge",type:"string | null",required:!1,default:"null",usage:"The badge type. If this is NULL, no badge will be displayed. This determines the style class applied for the badge."},{prop:"badge_text",type:"string",required:!1,default:"!",usage:"Text to display in the attached badge."}]}}}});
Vue.component("docs-aui-button-drop",{template:`<docs-aui-component v-bind="options" class="docs-aui-button-drop docs-container ds-container primary"><template #examples><aui-button-drop :dropdown="{test: 'Test'}" menu_align="left"/><aui-button-drop :dropdown="{test: 'Test'}" :disabled="true"/><p>relative to example:</p><div style="display: flex; outline: 1px dashed #777; height: 6rem; width: 16rem" id="rel"><aui-button-drop style="align-self: flex-end" text="no" :dropdown="{test: 'Test'}"/><aui-button-drop style="align-self: flex-end; margin-left: auto" text="yes" relative_to="#rel" :dropdown="{test: 'Test'}"/></div><p>Buttons come in the following styles:</p><aui-button-drop type="primary" text="primary (default)" :dropdown="{test: 'Test'}"/><aui-button-drop type="secondary" text="secondary" :dropdown="{test: 'Test'}"/><aui-button-drop type="success" text="success" :dropdown="{test: 'Test'}"/><aui-button-drop type="warning" text="warning" :dropdown="{test: 'Test'}"/><aui-button-drop type="failure" text="failure" :dropdown="{test: 'Test'}"/><div class="btn-group"><aui-button text="1"/><aui-button text="2"/><aui-button text="3"/><aui-button-drop :dropdown="{test: 'Test'}"/></div></template><template #notes><p>When running a local api, you may tie the disabled state to the api's calling state. Usually the return of this API is so fast that it causes a "flashing" effect on the form. To get around this you should create a delayed overlay property on your form to initiate the disabled state if an API takes longer than ~300ms.</p><p>Buttons may be grouped with a special AUI class <code>btn-group</code> to collapse all shared sides. Simply wrap your buttons in a container with the <code>btn-group</code> class.</p><p>Multiple group nesting levels are not supported.</p><p>Click events for menu items must be handled on the parent component/instance. The dropdown is structured as a simple String, String key-value pair where the key is the event that will be emitted on click of the menu item.</p></template></docs-aui-component>`,data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <aui-button-drop :dropdown="{test: \'Test\'}" />\n  <aui-button-drop :dropdown="{test: \'Test\'}" :disabled="true" />\n  <p>relative to example:</p>\n  <div style="display: flex; outline: 1px dashed #777; height: 6rem; width: 16rem" id="rel">\n    <aui-button-drop\n       style="align-self: flex-end"\n       text="no"\n       :dropdown="{test: \'Test\'}"\n    />\n    <aui-button-drop\n      style="align-self: flex-end; margin-left: auto"\n      text="yes"\n      relative_to="#rel"\n      :dropdown="{test: \'Test\'}"\n    />\n  </div>\n  <p>Buttons come in the following styles:</p>\n  <aui-button-drop type="primary" text="primary (default)" :dropdown="{test: \'Test\'}" />\n  <aui-button-drop type="secondary" text="secondary" :dropdown="{test: \'Test\'}" />\n  <aui-button-drop type="success" text="success" :dropdown="{test: \'Test\'}" />\n  <aui-button-drop type="warning" text="warning" :dropdown="{test: \'Test\'}" />\n  <aui-button-drop type="failure" text="failure" :dropdown="{test: \'Test\'}" />\n  <div class="btn-group">\n    <aui-button text="1" />\n    <aui-button text="2" />\n    <aui-button text="3" />\n    <aui-button-drop :dropdown="{test: \'Test\'}" />\n  </div>\n</div>',events:{click:"When the button is clicked","menu-click(key)":"When a menu entry is clicked","dropdown*":"Custom event per menu click, see dropdown prop (*event name may vary)"},slots:{default:"Any content in this slot will go in the button body"},props:[{prop:"type",type:"string",required:!1,default:"primary",usage:'The type of the button determines which style class will be applied. Accepted values are: none, primary, secondary, success, warning, failure. Type "none" will not apply any additional style classes. All other types will add the type as a style class.'},{prop:"text",type:"string",required:!1,default:"null",usage:"The text body of the button. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"dropdown",type:"object",required:!0,default:"null",usage:"The dropdown list to attach to the button. This is an object where the key is the event name that will be emitted on click of that menu entry and the value is the text to display in the menu. Events must be handled on the parent component."},{prop:"disabled",type:"boolean",required:!1,default:"false",usage:"If the button is disabled and non-interactive."},{prop:"icon_inactive",type:"string",required:!1,default:"fas fa-caret-down",usage:"The Font Awesome icon class for the inactive icon."},{prop:"icon_active",type:"string",required:!1,default:"fas fa-caret-up",usage:"The Font Awesome icon class for the active icon."},{prop:"menu_align",type:"string",required:!1,default:"left",usage:"Where to align the dropdown relative to the button. Accepts: left, right."},{prop:"relative_to",type:"string | null",required:!1,default:"null",usage:"Relative container for the dropdown placement. Used to avoid clipping out of parent element."}]}}}});
Vue.component("docs-aui-checkbox",{template:`<docs-aui-component v-bind="options" class="docs-aui-checkbox docs-container ds-container primary"><template #examples><aui-checkbox label="test"/><aui-checkbox label="checked" :checked="true"/><aui-checkbox label="disabled" :disabled="true"/><aui-checkbox label="success" success="success"/><aui-checkbox label="failure" failure="failure"/><aui-checkbox label="subtext" subtext="subtext"/></template><template #notes><p>All form control components can be bound with v-model.</p><p>All form control components default to full width flex.</p><p>When running a local api, you may tie the disabled state to the api's calling state. Usually the return of this API is so fast that it causes a "flashing" effect on the form. To get around this you should create a delayed overlay property on your form to initiate the disabled state if an API takes longer than ~300ms.</p><p>When the failure state evaluates to true, a watcher triggers to scroll to the highest failed form control component.</p></template></docs-aui-component>`,data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <aui-checkbox label="test" />\n  <aui-checkbox label="checked" :checked="true" />\n  <aui-checkbox label="disabled" :disabled="true" />\n  <aui-checkbox label="success" success="success" />\n  <aui-checkbox label="failure" failure="failure" />\n  <aui-checkbox label="subtext" subtext="subtext" />\n</div>',events:{"input($event.target.checked)":"When input is registered in the component"},slots:{default:"Any content in this slot will go in the component label"},props:[{prop:"label",type:"String | null",required:!1,default:"null",usage:"Component label. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"value",type:"String | Number | Boolean | null",required:!1,default:"null",usage:"The model binding value of the component."},{prop:"checked",type:"Boolean | Number",required:!1,default:"false",usage:"If the component is checked by default."},{prop:"disabled",type:"Boolean",required:!1,default:"false",usage:"If the component is disabled and non-interactive."},{prop:"success",type:"String | null",required:!1,default:"null",usage:"Success subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"failure",type:"String | null",required:!1,default:"null",usage:"Failure subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"subtext",type:"String | null",required:!1,default:"null",usage:"Subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."}]}}}});
Vue.component("docs-aui-crud",{template:'<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><p>The CRUD interface is quite large and complex, far too much to document here. Resources available:</p><p><a href="https://github.com/dynamicsuite/aui-crud-demo">Crud Demo Package Repository</a></p></template><template #notes><p>Every root element in the <code>#form</code> slot will automatically have a 1rem margin-bottom applied.</p><p>The property <code>overlay</code> is exported by the slot <code>#form</code> and should be used to display delayed loading and disabling form control.</p><p>By default, all CRUD components will use the same GET key for saving state to the URL. If you have more than one CRUD component on the page, you must change the GET key to something unique.</p><h4>APIs:</h4><p>The following are all of the associated APIs and what they can return. Anything else returned will result in a failure notice being shown and the page must be refreshed.</p><h5>List Read:</h5><ul><li><code>OK</code> - The list data was read. see the class <code>AUICrudRead</code></li></ul><h5>Form Create:</h5><ul><li><code>INPUT_ERROR</code> - Can return a standard input validation array when invalid values were found (missing fields, etc).</li><li><code>OK</code> - Must return the new storable ID on success.</li></ul><h5>Form Read:</h5><ul><li><code>NOT_FOUND</code> - If the storable was not found, this will redirect the user to the list.</li><li><code>OK</code> - If the storable was read. Must return the data as defined by the "fields" property.</li></ul><h5>Form Update:</h5><ul><li><code>INPUT_ERROR</code> - Can return a standard input validation array when invalid values were found (missing fields, etc).</li><li><code>OK</code> - No additional data is returned on success.</li></ul><h5>Form Delete:</h5><ul><li><code>DELETE_PROTECT</code> - Use this if the storable cannot be deleted for a specific reason.</li><li><code>OK</code> - No additional data is returned on success.</li></ul></template></docs-aui-component>',data(){return{options:{events:{"update:calling(calling)":'Update for "calling" (sync required)',"update:feedback(feedback)":'Update for "feedback" (sync required)',"update:form(form)":'Update for "form" (sync required)'},slots:{"list-actions":"Additional content to go on the list view next to the filter","list-pre-data":"Additional content to go on the list view before the data",form:"The content of the form"},props:[{prop:"error_icon",type:"String",default:"fas fa-exclamation-triangle",usage:"FontAwesome icon class to display for the error notice."},{prop:"error_text",type:"String",default:"A server error has occurred",usage:"Text to display for the error notice."},{prop:"error_subtext",type:"String",default:"Please reload the page",usage:"Subtext to display for the error notice."},{prop:"storable_key",type:"String",default:"id",usage:"Storable key for entries."},{prop:"get_key_id",type:"String",default:"crud",usage:'URL GET key for which view CRUD is on. A value of 0 means "show create" where as any other value will read the storable of that value and show the update page.'},{prop:"calling",type:"Boolean",default:"false",usage:"Calling state of any APIs. Must be synced to parent."},{prop:"list_title",type:"String",default:"CRUD List",usage:"Title of the list."},{prop:"list_show_create",type:"Boolean",default:"true",usage:"If the create button should be shown on the list."},{prop:"list_create_icon",type:"String",default:"fas fa-plus",usage:"The FontAwesome icon class to show on the create button (if visible)."},{prop:"list_show_filter",type:"Boolean",default:"true",usage:"If the filter should be shown."},{prop:"list_filter_placeholder",type:"String",default:"Filter",usage:"Placeholder for the filter input (if visible)."},{prop:"list_no_data_icon",type:"String",default:"fas fa-ban",usage:"The FontAwesome icon class to show when there is no data."},{prop:"list_no_data_text",type:"String",default:"No data",usage:"The text to display under the icon when there is no data."},{prop:"list_loading_icon",type:"String",default:"fas fa-circle-notch fa-spin",usage:"The FontAwesome icon class to show when the list is loading."},{prop:"list_loading_text",type:"String | null",default:"Loading...",usage:"The text to display under the icon when the list is loading."},{prop:"list_type",type:"String",default:"table",usage:'The type of the list. Supports "group" or "table".'},{prop:"list_group_icon_key",type:"String",default:"icon",usage:"Icon column to use in the data when in group mode."},{prop:"list_group_title_key",type:"String",default:"title",usage:"Title column to use in the data when in group mode."},{prop:"list_group_subtext_key",type:"String",default:"subtext",usage:"Subtext column to use in the data when in group mode."},{prop:"list_table_default_columns",type:"Array",default:"[]",usage:"The default columns to show on the table when in table mode."},{prop:"list_table_column_names",type:"Object",default:"{}",usage:"Column name map when in table mode. This is an object where each key is the true column name and the value is the displayed value."},{prop:"list_table_column_format",type:"Object",default:"{}",usage:'Column value format map when in table mode. This is an object where each key is the true column name and the value is a function. The function may take one "value" where this is the true value, and returns the displayed value.'},{prop:"list_table_storage_key",type:"String | null",default:"null",usage:'Storage key for when saving the table layout for the client. Saving the layout will be set on in local storage and then broadcast to the root instance for handling saving via external source. Layouts saved on the server may go in window.dynamicsuite["custom"]["aui_table"][storage_key]. If not set or NULL, the layout will not be saved across refreshes.'},{prop:"list_read_api",type:"String",required:!0,usage:"Read API for reading the list data."},{prop:"list_read_optional_data",type:"Object",default:"{}",usage:"Optional data to send along with the read API."},{prop:"list_range_limit",type:"Array",default:"[20, 50, 100]",usage:"Number of records to limit the list to. Defaults to the first value."},{prop:"list_filter_delay",type:"Number",default:"300",usage:"The delay from inactivity in the filter box until the list refreshes (in milliseconds)."},{prop:"list_refresh_interval",type:"Number | null",default:"null",usage:"Refresh interval for refreshing the list automatically (re-runs the read API). Given in seconds, a value of NULL will never refresh."},{prop:"list_get_key_limit",type:"String",default:"limit",usage:"URL GET key for list limit."},{prop:"list_get_key_page",type:"String",default:"page",usage:"URL GET key for list page."},{prop:"list_get_key_filter",type:"String",default:"filter",usage:"URL GET key for list filter."},{prop:"list_get_key_sort",type:"String",default:"sort",usage:"URL GET key for list sort."},{prop:"form",type:"Object",default:"{}",usage:"The actual form data sent to APIs."},{prop:"form_secure_fields",type:"Array",default:"[]",usage:'Secure fields that are cleared after API calls (such as passwords). This is an array of "field" names.'},{prop:"feedback",type:"Object",default:"{}",usage:"Form feedback"},{prop:"form_loading_icon",type:"String",default:"fas fa-circle-notch fa-spin",usage:"The FontAwesome icon class to show when the form is loading."},{prop:"form_loading_text",type:"String|null",default:"Loading...",usage:"The text to display under the icon when the form is loading."},{prop:"form_create_setup_api",type:"String|null",default:"null",usage:"API to call to pre-fill the form when creating a new storable."},{prop:"form_create_setup_api_data",type:"Object",default:"{}",usage:"Additional data to send along with the form create setup API."},{prop:"form_create_api",type:"String|null",default:"null",usage:"API to call to create a new storable."},{prop:"form_create_api_data",type:"Object",default:"{}",usage:"Additional data to send along with the form create API."},{prop:"form_read_api",type:"String|null",default:"null",required:!0,usage:"API to call to read a storable to pre-fill the form when editing/viewing."},{prop:"form_read_api_data",type:"Object",default:"{}",usage:"Additional data to send along with the form read API."},{prop:"form_update_api",type:"String|null",default:"null",usage:"API to call to update the active storable."},{prop:"form_update_api_data",type:"Object",default:"{}",usage:"Additional data to send along with the form update API."},{prop:"form_delete_api",type:"String|null",default:"null",usage:"API to call to delete the active storable."},{prop:"form_delete_api_data",type:"Object",default:"{}",usage:"Additional data to send along with the form delete API."},{prop:"form_exclude_columns",type:"String[]",default:"[]",usage:"Columns to exclude from API calls."},{prop:"form_format_columns",type:"Object",default:"{}",usage:"Format specific columns when sent to API calls. This is an object where the key is the column and the value is a function that returns a formatted value. This function takes 1 argument, the actual form value."},{prop:"form_show_actions",type:"Boolean",default:"true",usage:"If the form actions should be shown."},{prop:"form_show_back_button",type:"Boolean",default:"true",usage:"If the back button should be show on the form actions."},{prop:"form_action_back_text",type:"String",default:"Back",usage:'Text to display on the form action for "Back".'},{prop:"form_action_update_text",type:"String",default:"Update",usage:'Text to display on the form action for "Update".'},{prop:"form_action_update_loading_text",type:"String",default:"Updating...",usage:'Text to display on the form action for "Update" when loading.'},{prop:"form_action_create_text",type:"String",default:"Create",usage:'Text to display on the form action for "Create".'},{prop:"form_action_create_loading_text",type:"String",default:"Creating...",usage:'Text to display on the form action for "Create" when loading.'},{prop:"form_created_confirmation_icon",type:"String",default:"fas fa-check-circle",usage:"FontAwesome icon class to display on the created confirmation splash screen."},{prop:"form_created_confirmation_text",type:"String",default:"Created!",usage:"Text to display on the created confirmation splash screen."},{prop:"form_action_delete_cancel_text",type:"String",default:"Cancel",usage:'Text to display on the form action for "Delete" when canceling.'},{prop:"form_action_delete_text",type:"String",default:"Delete",usage:'Text to display on the form action for "Delete".'},{prop:"form_action_delete_loading_text",type:"String",default:"Deleting...",usage:'Text to display on the form action for "Delete" when loading.'},{prop:"form_action_delete_prompt",type:"String",default:"Are you sure you want to delete?",usage:"Text to display on the modal body when deleting a storable."},{prop:"form_feedback_success_tick_icon",type:"String",default:"fas fa-check",usage:'FontAwesome icon class to show on the "success" feedback tick.'},{prop:"form_feedback_failure_tick_icon",type:"String",default:"fas fa-times",usage:'FontAwesome icon class to show on the "failure" feedback tick.'},{prop:"form_created_to_list",type:"Boolean",default:"true",usage:"If you should be returned to the list view on creation."}]}}}});
Vue.component("docs-aui-crud-list",{template:'<docs-aui-component v-bind="options" class="docs-aui-checkbox docs-container ds-container primary"><template #examples><p>The CRUD list component is quite large and complex, far too much to document here. Resources available:</p><p><a href="https://github.com/dynamicsuite/aui-crud-demo">Crud Demo Package Repository</a></p></template><template #notes><p>The CRUD list component is designed to read incremental data from a DS API and render it on the page, either as a list group or table.</p><p>Primary features include sorting and filtering of incremental data.</p><p>The server-side class <code>CrudRead</code> should be consulted for implementation.</p><p>Error in API calls must be handled externally via the <code>@error</code> event.</p><p>By default, all CRUD list components will use the same GET keys for saving state to the URL. If you have more than one CRUD list component on the page, you must change each GET key to something unique.</p></template></docs-aui-component>',data(){return{options:{events:{"update:calling(calling)":'Update for "calling" (sync required)',error:"When there is a server-side error","show-create":'When the "create" button is clicked',"list-interaction(storable_key)":"When there is an interaction with a storable in the list"},slots:{actions:"Additional action components to go in the header preceding all default actions.","pre-data":"Additional content to go before the data"},props:[{prop:"title",type:"String",default:"CRUD List",usage:"Title of the list."},{prop:"show_create",type:"Boolean",default:"true",usage:"If the create button should be shown."},{prop:"create_icon",type:"String",default:"fas fa-plus",usage:"The FontAwesome icon class to show on the create button (if visible)."},{prop:"show_filter",type:"Boolean",default:"true",usage:"If the filter should be shown."},{prop:"filter_placeholder",type:"String",default:"Filter",usage:"Placeholder for the filter input (if visible)."},{prop:"no_data_icon",type:"String",default:"fas fa-ban",usage:"The FontAwesome icon class to show when there is no data."},{prop:"no_data_text",type:"String",default:"No data",usage:"The text to display under the icon when there is no data."},{prop:"loading_icon",type:"String",default:"fas fa-circle-notch fa-spin",usage:"The FontAwesome icon class to show when the list is loading."},{prop:"loading_text",type:"String | null",default:"Loading...",usage:"The text to display under the icon when the list is loading."},{prop:"calling",type:"Boolean",default:"false",usage:"Calling state of any APIs. Must be synced to parent."},{prop:"overlay",type:"Boolean",default:"false",usage:"Overlay state for disabling elements. Must be synced to parent."},{prop:"type",type:"String",default:"table",usage:'The type of the list. Supports "group" or "table".'},{prop:"storable_key",type:"String",default:"id",usage:"Storable key for entries."},{prop:"group_icon_key",type:"String",default:"icon",usage:"Icon column to use in the data when in group mode."},{prop:"group_title_key",type:"String",default:"title",usage:"Title column to use in the data when in group mode."},{prop:"group_subtext_key",type:"String",default:"subtext",usage:"Subtext column to use in the data when in group mode."},{prop:"table_default_columns",type:"Array",default:"[]",usage:"The default columns to show on the table when in table mode."},{prop:"table_column_names",type:"Object",default:"{}",usage:"Column name map when in table mode. This is an object where each key is the true column name and the value is the displayed value."},{prop:"table_column_format",type:"Object",default:"{}",usage:'Column value format map when in table mode. This is an object where each key is the true column name and the value is a function. The function may take one "value" where this is the true value, and returns the displayed value.'},{prop:"table_storage_key",type:"String | null",default:"null",usage:'Storage key for when saving the table layout for the client. Saving the layout will be set on in local storage and then broadcast to the root instance for handling saving via external source. Layouts saved on the server may go in window.dynamicsuite["custom"]["aui_table"][storage_key]. If not set or NULL, the layout will not be saved across refreshes.'},{prop:"read_api",type:"String",required:!0,usage:"Read API for reading the list data."},{prop:"read_optional_data",type:"Object",default:"{}",usage:"Optional data to send along with the read API."},{prop:"range_limit",type:"Array",default:"[20, 50, 100]",usage:"Number of records to limit the list to. Defaults to the first value."},{prop:"filter_delay",type:"Number",default:"300",usage:"The delay from inactivity in the filter box until the list refreshes (in milliseconds)."},{prop:"refresh_interval",type:"Number | null",default:"null",usage:"Refresh interval for refreshing the list automatically (re-runs the read API). Given in seconds, a value of NULL will never refresh."},{prop:"get_key_limit",type:"String",default:"limit",usage:"URL GET key for list limit."},{prop:"get_key_page",type:"String",default:"page",usage:"URL GET key for list page."},{prop:"get_key_filter",type:"String",default:"filter",usage:"URL GET key for list filter."},{prop:"get_key_sort",type:"String",default:"sort",usage:"URL GET key for list sort."}]}}}});
Vue.component("docs-aui-input",{template:`<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-input label="demo" placeholder="demo"/><aui-input label="datalist" :options="['Option 1', 'Option 2']"/><aui-input label="telephone (US)" type="tel" placeholder="(___) ___-____"/><aui-input label="disabled" :disabled="true"/><aui-input label="success" success="success"/><aui-input label="failure" failure="failure"/><aui-input label="subtext" subtext="subtext"/><aui-input label="leading cap" leading_cap="leading cap"/><aui-input label="trailing cap" trailing_cap="trailing cap"/><aui-input label="caps with feedback" trailing_cap="trailing cap" failure="oops!"/><aui-input label="no feedback icon" :no_feedback_icon="true" failure="oops!"/></template><template #notes><p>All form control components can be bound with v-model.</p><p>All form control components default to full width flex.</p><p>When running a local api, you may tie the disabled state to the api's calling state. Usually the return of this API is so fast that it causes a "flashing" effect on the form. To get around this you should create a delayed overlay property on your form to initiate the disabled state if an API takes longer than ~300ms.</p><p>When the failure state evaluates to true, a watcher triggers to scroll to the highest failed form control input.</p><p>Inputs with the type "tel" (telephone) will be masked to standard US format of (000) 000-0000 (14 characters).</p></template></docs-aui-component>`,data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <aui-input label="demo" placeholder="demo" />\n  <aui-input label="datalist" :options="[\'Option 1\', \'Option 2\']" />\n  <aui-input label="telephone (US)" type="tel" placeholder="(___) ___-____" />\n  <aui-input label="disabled" :disabled="true" />\n  <aui-input label="success" success="success" />\n  <aui-input label="failure" failure="failure" />\n  <aui-input label="subtext" subtext="subtext" />\n  <aui-input label="leading cap" leading_cap="leading cap" />\n  <aui-input label="trailing cap" trailing_cap="trailing cap" />\n  <aui-input label="caps with feedback" trailing_cap="trailing cap" failure="oops!" />\n  <aui-input label="no feedback icon" :no_feedback_icon="true" failure="oops!" />\n</div>',events:{"focus($event.target)":"When the component is focused","blur($event.target)":"When the component is blurred","input($event.target.value)":"When component is registered in the component","keydown($event)":"When there is a key pressed down while focused"},slots:{default:"Any content in this slot will go in the component label"},props:[{prop:"label",type:"String | null",required:!1,default:"null",usage:"Component label. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"leading_cap",type:"String | null",required:!1,default:"null",usage:"Content to display in the leading component cap. Free-form HTML."},{prop:"trailing_cap",type:"String | null",required:!1,default:"null",usage:"Content to display in the trailing component cap. Free-form HTML."},{prop:"value",type:"String | Number | Boolean | null",required:!1,default:"null",usage:"The model binding value of the component."},{prop:"type",type:"String",required:!1,default:"text",usage:"Input type. Supports most HTML5 input types."},{prop:"autocomplete",type:"String | null",required:!1,default:"null",usage:"Component autocomplete value."},{prop:"autocapitalize",type:"String | null",required:!1,default:"null",usage:"Component autocapitalize value."},{prop:"placeholder",type:"String | null",required:!1,default:"null",usage:"Component placeholder text."},{prop:"disabled",type:"Boolean",required:!1,default:"false",usage:"If the component is disabled and non-interactive."},{prop:"options",type:"Array",required:!1,default:"[]",usage:"Options if a datalist is attached to the component. This must be an array of string/numeric values that should be used to generate the datalist and bind to the model."},{prop:"tabindex",type:"String | Number | null",required:!1,default:"null",usage:"Input tab index."},{prop:"step",type:"String | Number | null",required:!1,default:"null",usage:"Input step for numeric inputs."},{prop:"max_whole_digits",type:"String | Number | null",required:!1,default:"null",usage:"The maximum number of whole digits for numeric inputs."},{prop:"max_decimal_digits",type:"String | Number | null",required:!1,default:"null",usage:"The maximum number of decimal digits for numeric inputs."},{prop:"success",type:"String | null",required:!1,default:"null",usage:"Success subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"failure",type:"String | null",required:!1,default:"null",usage:"Failure subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"subtext",type:"String | null",required:!1,default:"null",usage:"Subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"no_feedback_icon",type:"Boolean",required:!1,default:"false",usage:"If no icon should trail the component on feedback, for use in short length components."}]}}}});
Vue.component("docs-aui-list-group",{template:'<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-list-group :list="list"/></template><template #notes><p>On click of a group in the list, the "value" of the group will be emitted. You must handle this event on the parent.</p></template></docs-aui-component>',data(){return{list:[{title:"Row 1",subtext:"This is row 1",value:1},{icon:"fas fa-box",title:"Row 2",subtext:"This is row 2",value:2},{title:"Row 3",subtext:"This is row 3",value:3}],options:{syntax_html:'<div id="#test">\n  <aui-list-group :list="list" />\n</div>',syntax_js:"new Vue({\n  el: '#test'\n  data: {\n    list: [\n      {\n        title: 'Row 1',\n        subtext: 'This is row 1',\n        value: 1\n      },\n      {\n        icon: 'fas fa-box',\n        title: 'Row 2',\n        subtext: 'This is row 2',\n        value: 2\n      },\n      {\n        title: 'Row 3',\n        subtext: 'This is row 3',\n        value: 3\n      }\n    ]\n  }\n});",events:{"click(value)":"On click of an group (payload is the group value)"},props:[{prop:"list",type:"Array",required:!0,default:"null",usage:'The list of groups to render. Each child of the array must be an object and each object must contain a "title" of type "string", and "value" of any type. The "value" will be emitted on click of the group. You may also include a "subtext" of type "string" which will be subtext displayed on the row below the title. If an "icon" of type "string" ispresent, the icon will be appended before the text values. The "icon" value must be a valid Font Awesome icon class.'}]}}}});
Vue.component("docs-aui-modal",{template:'<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-button text="Show Modal" @click="show = true"/><aui-modal :show.sync="show" title="Test Title"><template #content><p>This is a test modal!</p></template><template #left><aui-button type="secondary">cancel</aui-button></template><template #right><aui-button>proceed</aui-button></template></aui-modal></template><template #notes><p>Only one modal may be open at a given time.</p><p>The modal show property should sync modifier back to the show property on the parent.</p><p>This component utilizes nested slots. If you just use the default slot, the entire body will be overridden with the given content. If you use the slot <code>#content</code> then a footer will be added to the bottom of the modal body. To put content in the footer you can use the named slots <code>#left</code> and <code>#right</code> to put the content in their respective sides of the footer.</p><p>Extra padding is stripped by the <code>#content</code> slot, you may override this in delegated styles.</p></template></docs-aui-component>',data(){return{show:!1,options:{syntax_js:"new Vue({\n  el: '#test'\n  data: {\n    show: false\n  }\n});",syntax_html:'<div id="#test">\n  <aui-button text="Show Modal" @click="show = true"/>\n  <aui-modal :show.sync="show" title="Test Title">\n    <template #content>\n      <p>\n        This is a test modal!\n      </p>\n    </template>\n    <template #left>\n      <aui-button type="secondary">cancel</aui-button>\n    </template>\n    <template #right>\n      <aui-button>proceed</aui-button>\n    </template><p>\n  </aui-modal>\n</div>',events:{"update:show(show)":'Update for "show" (sync required)',close:"When the modal is closed"},slots:{default:"Anything that goes in this slow will fill the entire body of the modal",content:"Anything that goes in this slow will fill the content area only of the modal",left:"Anything that goes in this slot will go on the left side of the footer",right:"Anything that goes in this slot will go on the right side of the footer"},props:[{prop:"type",type:"String",required:!1,default:"primary",usage:'The type of the modal determines which style class will be applied. Accepted values are: none, primary, secondary, success, warning, failure. Type "none" will not apply any additional style classes. All other types will add a style class in the format of <code>modal-${name}</code>.'},{prop:"show",type:"Boolean",required:!0,default:"false",usage:"If the modal should be shown."},{prop:"title",type:"String | Number | null",required:!1,default:"null",usage:"The title bar text of the modal."},{prop:"closeable",type:"Boolean",required:!1,default:"true",usage:"If the modal is closeable."}]}}}});
Vue.component("docs-aui-notice",{template:`<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-notice type="primary" icon="fas fa-chess-knight" text="Static Knight"/><aui-notice type="secondary" icon="fas fa-snowboarding" text="Nothing to do"/><aui-notice type="success" icon="fas fa-smile" text="It worked!"/><aui-notice type="warning" icon="fas fa-grimace" text="It kinda worked?"/><aui-notice type="failure" icon="fas fa-angry" subtext="Please reload the page" text="It didn't work."/><aui-notice icon="fas fa-circle-notch fa-spin" text="Loading"/></template><template #notes><p>Notices display as flex full-width by default with all content aligned and justified to the center.</p></template></docs-aui-component>`,data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <aui-notice type="primary" icon="fas fa-chess-knight" text="Static Knight" />\n  <aui-notice type="secondary" icon="fas fa-snowboarding" text="Nothing to do" />\n  <aui-notice type="success" icon="fas fa-smile" text="It worked!" />\n  <aui-notice type="warning" icon="fas fa-grimace" text="It kinda worked?" />\n  <aui-notice type="failure" icon="fas fa-angry" subtext="Please reload the page" text="It didn\'t work." />\n  <aui-notice icon="fas fa-circle-notch fa-spin" text="Loading" />\n</div>',slots:{default:"Any content in this slot will go in the notice message body"},props:[{prop:"type",type:"String",required:!1,default:"secondary",usage:"The type of the notice determines which style class will be applied. Accepted values are: primary, secondary, success, warning, failure."},{prop:"icon",type:"String",required:!1,default:"fas fa-cog",usage:"The Font Awesome icon to display for the notice."},{prop:"text",type:"String | Number | null",required:!1,default:"null",usage:"The body of the notice. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"subtext",type:"String | Number | null",required:!1,default:"null",usage:"Subtext to display under the notice text."}]}}}});
Vue.component("docs-aui-number",{template:'<docs-aui-component v-bind="options" class="docs-aui-number docs-container ds-container primary"><template #examples><aui-number :is_currency="true" number="1"/><aui-number :padding="0" :is_currency="true" number="-$1"/><aui-number number="10.49"/><aui-number :padding="2" number="5312.1111"/><aui-number :padding="2" number="5312.1"/><aui-number :padding="2" number="5312.01"/><aui-number :is_currency="true" number="-$99.99"/><aui-number :is_currency="true" number="$123"/></template><template #notes><p>If the number is defined as currency, and a "padding" property is not given, the pad length of the number will default to 2. If the "padding" property is given, it will always be used. If the number given is not defined as currency and no "padding" property is given, the pad length of the number will default to 0.</p><p>If a number exceeds the number of decimals for padding as defined by the property "padding", the number will exceed the padding no matter what, this is so that you can never get clipped values and the model will always render as it is set.</p></template></docs-aui-component>',data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <aui-number :is_currency="true" number="1" />\n  <aui-number :padding="0" :is_currency="true" number="-$1" />\n  <aui-number number="10.49" />\n  <aui-number :padding="2" number="5312.1111" />\n  <aui-number :padding="2" number="5312.1" />\n  <aui-number :padding="2" number="5312.01" />\n  <aui-number :is_currency="true" number="-$99.99" />\n  <aui-number :is_currency="true" number="$123" />\n</div>',props:[{prop:"is_currency",type:"Boolean",required:!1,default:"false",usage:"If the number should be rendered as currency."},{prop:"currency_symbol",type:"String",required:!1,default:"$",usage:"The currency symbol to use if the number is defined as currency."},{prop:"padding",type:"Number | null",required:!1,default:"null",usage:"The number of zeros that should pad the number to the right of the decimal place."},{prop:"number",type:"Number | String | null",required:!0,default:"null",usage:"The number to format and display."}]}}}});
Vue.component("docs-aui-pagination",{template:`<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-pagination :page.sync="page" :total="total" :limit.sync="limit" :list_range_limit="list_range_limit"/></template><template #notes><p>This component default to full width flex.</p><p>When running a local api, you may tie the disabled state to the api's calling state. Usually the return of this API is so fast that it causes a "flashing" effect on the form. To get around this you should create a delayed overlay property on your form to initiate the disabled state if an API takes longer than ~300ms.</p><p>Both <code>page</code> and <code>limit</code> must be synced back to the parent.</p><p>Paginating to the current page or out of range does not trigger a <code>@paginate</code> event.</p></template></docs-aui-component>`,data(){return{page:1,total:1e4,limit:10,list_range_limit:[10,100,1e3],options:{syntax_js:"new Vue({\n  el: '#test'\n  data: {\n    page: 1,\n    total: 10000,\n    limit: 10,\n    list_range_limit: [10, 100, 1000]\n  }\n});",syntax_html:'<div id="#test">\n  <aui-pagination\n    :page.sync="page"\n    :total="total"\n    :limit.sync="limit"\n    :list_range_limit="list_range_limit"\n  />\n</div>',events:{"update:page(page)":'Update for "page" (sync required)',"update:limit(limit)":'Update for "limit" (sync required)',paginate:"When a valid pagination is triggered"},props:[{prop:"disabled",type:"Boolean",required:!1,default:"false",usage:"If the buttons are disable and non-interactive."},{prop:"page",type:"Number",required:!0,default:"null",usage:"The current page."},{prop:"total",type:"Number",required:!0,default:"null",usage:"The total number of potential records in the dataset."},{prop:"limit",type:"Number",required:!0,default:"null",usage:"The record limit per page."},{prop:"list_range_limit",type:"Number[]",required:!0,default:"null",usage:"The possible limit options for the dropdown."}]}}}});
Vue.component("docs-aui-radio",{template:`<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-radio name="group" data="test" label="test"/><aui-radio name="group" data="disabled" label="disabled" :disabled="true"/><aui-radio name="group" data="success" label="success" success="success"/><aui-radio name="group" data="failure" label="failure" failure="failure"/><aui-radio name="group" data="subtext" label="subtext" subtext="subtext"/></template><template #notes><p>All form control components can be bound with v-model.</p><p>All form control components default to full width flex.</p><p>When running a local api, you may tie the disabled state to the api's calling state. Usually the return of this API is so fast that it causes a "flashing" effect on the form. To get around this you should create a delayed overlay property on your form to initiate the disabled state if an API takes longer than ~300ms.</p><p>When the failure state evaluates to true, a watcher triggers to scroll to the highest failed form control component.</p></template></docs-aui-component>`,data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <aui-radio name="group" data="test" label="test" />\n  <aui-radio name="group" data="disabled" label="disabled" :disabled="true" />\n  <aui-radio name="group" data="success" label="success" success="success" />\n  <aui-radio name="group" data="failure" label="failure" failure="failure" />\n  <aui-radio name="group" data="subtext" label="subtext" subtext="subtext" />\n</div>',events:{"input($event.target.value)":"When input is registered in the component"},slots:{default:"Any content in this slot will go in the component label"},props:[{prop:"label",type:"String | null",required:!1,default:"null",usage:"Component label. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"data",type:"String | Number | Boolean | null",required:!0,default:"null",usage:"The value of the radio button to set on the group."},{prop:"name",type:"String",required:!0,default:"null",usage:"The name attribute to group the component with."},{prop:"disabled",type:"Boolean",required:!1,default:"false",usage:"If the component is disabled and non-interactive."},{prop:"success",type:"String | null",required:!1,default:"null",usage:"Success subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"failure",type:"String | null",required:!1,default:"null",usage:"Failure subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"subtext",type:"String | null",required:!1,default:"null",usage:"Subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."}]}}}});
Vue.component("docs-aui-select",{template:`<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-select label="demo" :options="opt"/><aui-select label="disabled" :disabled="true" :options="opt"/><aui-select label="success" success="success" :options="opt"/><aui-select label="failure" failure="failure" :options="opt"/><aui-select label="subtext" subtext="subtext" :options="opt"/><aui-select label="leading cap" leading_cap="leading cap" :options="opt"/><aui-select label="trailing cap" trailing_cap="trailing cap" :options="opt"/><aui-select label="caps with feedback" trailing_cap="trailing cap" failure="oops!" :options="opt"/><aui-select label="no feedback icon" :no_feedback_icon="true" failure="oops!" :options="opt"/></template><template #notes><p>All form control components can be bound with v-model.</p><p>All form control components default to full width flex.</p><p>When running a local api, you may tie the disabled state to the api's calling state. Usually the return of this API is so fast that it causes a "flashing" effect on the form. To get around this you should create a delayed overlay property on your form to initiate the disabled state if an API takes longer than ~300ms.</p><p>When the failure state evaluates to true, a watcher triggers to scroll to the highest failed form control component.</p></template></docs-aui-component>`,data(){return{opt:{0:"",1:"Option 1",2:"Option 2"},options:{syntax_js:"new Vue({\n  el: '#test'\n  data: {\n    opt: {'0': '', '1': 'Option 1', '2': 'Option 2'}\n  }\n});",syntax_html:'<div id="#test">\n  <aui-select label="demo" :options="opt" />\n  <aui-select label="disabled" :disabled="true" :options="opt" />\n  <aui-select label="success" success="success" :options="opt" />\n  <aui-select label="failure" failure="failure" :options="opt" />\n  <aui-select label="subtext" subtext="subtext" :options="opt" />\n  <aui-select label="leading cap" leading_cap="leading cap" :options="opt" />\n  <aui-select label="trailing cap" trailing_cap="trailing cap" :options="opt" />\n  <aui-select label="caps with feedback" trailing_cap="trailing cap" failure="oops!" :options="opt" />\n  <aui-select label="no feedback icon" :no_feedback_icon="true" failure="oops!" :options="opt" />\n</div>',events:{"focus($event.target)":"When the component is focused","blur($event.target)":"When the component is blurred","input(selected)":"When input is registered in the component"},slots:{default:"Any content in this slot will go in the component label"},props:[{prop:"label",type:"String | null",required:!1,default:"null",usage:"Component label. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"leading_cap",type:"String | null",required:!1,default:"null",usage:"Content to display in the leading component cap. Free-form HTML."},{prop:"trailing_cap",type:"String | null",required:!1,default:"null",usage:"Content to display in the trailing component cap. Free-form HTML."},{prop:"value",type:"String | Number | Boolean | null",required:!1,default:"null",usage:"The model binding value of the component."},{prop:"autocomplete",type:"String | null",required:!1,default:"null",usage:"Component autocomplete value."},{prop:"disabled",type:"Boolean",required:!1,default:"false",usage:"If the component is disabled and non-interactive."},{prop:"options",type:"Array",required:!1,default:"[]",usage:"Options to be rendered. This must be an object where the key is the value that will be assigned to the option and the value is the option label."},{prop:"multiple",type:"Boolean",required:!1,default:"false",usage:"If it is possible to select multiple entries."},{prop:"size",type:"String | Number | null",required:!1,default:"null",usage:"The number of visible options."},{prop:"success",type:"String | null",required:!1,default:"null",usage:"Success subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"failure",type:"String | null",required:!1,default:"null",usage:"Failure subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"subtext",type:"String | null",required:!1,default:"null",usage:"Subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"no_feedback_icon",type:"Boolean",required:!1,default:"false",usage:"If no icon should trail the component on feedback, for use in short length components."},{prop:"us_states",type:"Boolean",required:!1,default:"false",usage:"If the component should render US states for its options. The bound value is the 2-digit state code."}]}}}});
Vue.component("docs-aui-select-assignment",{template:'<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-select-assignment :assigned.sync="assigned" :unassigned.sync="unassigned"/></template><template #notes><p>Select assignments display as flex full-width by default.</p><p>This component is intended to be used with "sync" vue modifiers to re-sync the changed lists back to the parent.</p></template></docs-aui-component>',data(){return{assigned:{1:"Option 1",2:"Option 2"},unassigned:{3:"Option 3",4:"Option 4"},options:{syntax_js:"new Vue({\n  el: '#test'\n  data: {\n    assigned: {\n      1: 'Option 1',\n      2: 'Option 2'\n    },\n    unassigned: {\n      3: 'Option 3',\n      4: 'Option 4'\n    }\n  }\n});",syntax_html:'<div id="#test">\n  <aui-select-assignment :assigned.sync="assigned" :unassigned.sync="unassigned" />\n</div>',events:{"update:assigned(assigned)":'Update for "assigned" (sync required)',"update:unassigned(unassigned)":'Update for "unassigned" (sync required)'},props:[{prop:"assigned",type:"Object | null",required:!0,default:"null",usage:"Key-value list of assigned options."},{prop:"assigned_label",type:"String",required:!1,default:"Assigned",usage:'Label for the "assigned" list.'},{prop:"unassigned",type:"Object | null",required:!0,default:"null",usage:"Key-value list of unassigned options."},{prop:"unassigned_label",type:"String",required:!1,default:"Unassigned",usage:'Label for the "unassigned" list.'},{prop:"disabled",type:"Boolean",required:!1,default:"false",usage:"If all selects and buttons are disabled non-interactive."},{prop:"size",type:"String | Number | null",required:!1,default:"null",usage:"The number of visible options."}]}}}});
Vue.component("docs-aui-table",{template:`<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-table :table="table"/></template><template #notes><p>AUI tables are a "proto component" designed to be extended by higher level components.</p><p>By default, tables only contain some basic styling, but have an assortment of events they can emit to a parent component (such as CRUD) to extend their functionality with sorting, interaction, etc.</p><p>Table column layouts may be saved. By default, the layout is saved an retrieved via localstorage, but these values can also be saved on the server. When a save is requested, an event is broadcast back to the root instance for "aui-table-save" with the columns to save. You must handle this save by listening for this event.</p><p>Before localstorage saves are requested, the component will look for: <code>window.dynamicsuite['custom']['aui_table'][storage_key]</code> to load the columns. If not found (set on server), localstorage will be used.</p></template></docs-aui-component>`,data(){return{table:[{col_1:"col 1 test 1",col_2:"col 2 test 1",col_3:"col 3 test 1"},{col_1:"col 1 test 2",col_2:"col 2 test 2",col_3:"col 3 test 2"},{col_1:"col 1 test 3",col_2:"col 2 test 3",col_3:"col 3 test 3"},{col_1:"col 1 test 4",col_2:"col 2 test 4",col_3:"col 3 test 4"},{col_1:"col 1 test 5",col_2:"col 2 test 5",col_3:"col 3 test 5"}],options:{syntax_js:"new Vue({\n  el: '#test'\n  data: {\n    table: [\n      {col_1: 'col 1 test 1', col_2: 'col 2 test 1', col_3: 'col 3 test 1'},\n      {col_1: 'col 1 test 2', col_2: 'col 2 test 2', col_3: 'col 3 test 2'},\n      {col_1: 'col 1 test 3', col_2: 'col 2 test 3', col_3: 'col 3 test 3'},\n      {col_1: 'col 1 test 4', col_2: 'col 2 test 4', col_3: 'col 3 test 4'},\n      {col_1: 'col 1 test 5', col_2: 'col 2 test 5', col_3: 'col 3 test 5'}\n    ]\n  },\n});",syntax_html:'<div id="#test">\n  <aui-table :table="table" />\n</div>',events:{"update:sort(sort)":'Update for "sort" (sync required)',"row-interaction(interactive_column)":"When an interactive table row is clicked","$root.aui-table-reset":"When a table layout reset was requested","$root.aui-table-save(columns)":"When a table layout save was requested"},props:[{prop:"table",type:"Array",default:"[]",usage:"The table data to render in the form of a raw array of rows of data where each row is an object."},{prop:"interactive",type:"Boolean",default:"false",usage:"If the table is interactive and should emit something on row click."},{prop:"interactive_column",type:"String | null",default:"null",usage:"The column to emit the value of on row interaction."},{prop:"default_columns",type:"String[]",default:"[]",usage:"The default columns that are visible on the table."},{prop:"column_names",type:"Object",default:"{}",usage:"Column name map. This is an object where each key is the true column name and the value is the displayed value."},{prop:"column_format",type:"Object",default:"{}",usage:'Column value format map. This is an object where each key is the true column name and the value is a function. The function may take one "value" where this is the true value, and returns the displayed value.'},{prop:"sortable",type:"Boolean",default:"false",usage:"If the table is sortable. If sortable, icons will be added to the table header and clicking on the header will sort by that column. This component does not handle any of the sorting itself, but emits out a @sort event with which columns to sort by. Actual sorting functionality must be handled by the parent."},{prop:"sort",type:"Object",default:"{}",usage:"Key, value pair for sorting. The key is the column to sort and the value is the sorting direction (ascending or descending). Must be synced back to the parent."},{prop:"sort_icon_none",type:"String",default:"fas fa-sort",usage:"Column sorting icon (FontAwesome class): no sort on column."},{prop:"sort_icon_asc",type:"String",default:"fas fa-sort-amount-down",usage:"Column sorting icon (FontAwesome class): ascending."},{prop:"sort_icon_desc",type:"String",default:"fas fa-sort-amount-down-alt",usage:"Column sorting icon (FontAwesome class): descending."},{prop:"storage_key",type:"String | null",default:"null",usage:'Storage key for when saving the table layout for the client. Saving the layout will be set on in local storage and then broadcast to the root instance for handling saving via external source. Layouts saved on the server may go in window.dynamicsuite["custom"]["aui_table"][storage_key]. If not set or NULL, the layout will not be saved across refreshes.'},{prop:"calling",type:"Boolean",default:"false",usage:"If an API calling state is present for blocking interaction."}]}}}});
Vue.component("docs-aui-tabs",{template:'<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-tabs :tabs="tabs" :tab.sync="tab"/></template><template #notes><p>Tabs are designed by default to be used on a "whitesmoke" backdrop, the same backdrop as the default container. You must override the style when used on any other background.</p></template></docs-aui-component>',data(){return{tabs:{tab1:"Tab 1",tab2:"Tab 2",tab3:"Tab 3",tab4:"Tab 4",tab5:"Tab 5"},tab:"tab1",options:{syntax_js:"new Vue({\n  el: '#test'\n  data: {\n    tabs: {\n      tab1: 'Tab 1',\n      tab2: 'Tab 2',\n      tab3: 'Tab 3',\n      tab4: 'Tab 4',\n      tab5: 'Tab 5'\n    },\n    tab: 'tab1'\n  }\n});",syntax_html:'<div id="#test">\n  <aui-tabs :tabs="tabs" :tab.sync="tab" />\n</div>',events:{"update:tab(tab)":'Update for "tab" (sync required)',"change(tab)":"When the tabs change"},props:[{prop:"tabs",type:"Object",required:!0,default:"null",usage:"The tabs to render. This must be a simple string-string key-value object where the key is the tab name and the value is the name to display."},{prop:"tab",type:"String | Number",required:!0,default:"null",usage:"The current tab (key)."},{prop:"disabled",type:"Boolean",required:!1,default:"false",usage:"If the tabs are disabled and non-interactive."}]}}}});
Vue.component("docs-aui-textarea",{template:`<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-textarea label="demo" placeholder="demo" rows="5"/><aui-textarea label="disabled" :disabled="true"/><aui-textarea label="success" success="success"/><aui-textarea label="failure" failure="failure"/><aui-textarea label="subtext" subtext="subtext"/><aui-textarea label="leading cap" leading_cap="leading cap"/><aui-textarea label="trailing cap" trailing_cap="trailing cap"/><aui-textarea label="caps with feedback" trailing_cap="trailing cap" failure="oops!"/></template><template #notes><p>All form control components can be bound with v-model.</p><p>All form control components default to full width flex.</p><p>When running a local api, you may tie the disabled state to the api's calling state. Usually the return of this API is so fast that it causes a "flashing" effect on the form. To get around this you should create a delayed overlay property on your form to initiate the disabled state if an API takes longer than ~300ms.</p><p>When the failure state evaluates to true, a watcher triggers to scroll to the highest failed form control component.</p></template></docs-aui-component>`,data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <aui-textarea label="demo" placeholder="demo" rows="5" />\n  <aui-textarea label="disabled" :disabled="true" />\n  <aui-textarea label="success" success="success" />\n  <aui-textarea label="failure" failure="failure" />\n  <aui-textarea label="subtext" subtext="subtext" />\n  <aui-textarea label="leading cap" leading_cap="leading cap" />\n  <aui-textarea label="trailing cap" trailing_cap="trailing cap" />\n  <aui-textarea label="caps with feedback" trailing_cap="trailing cap" failure="oops!" />\n</div>',events:{"focus($event.target)":"When the component is focused","blur($event.target)":"When the component is blurred","input($event.target.value)":"When input is registered in the component","keydown($event)":"When there is a key pressed down while focused"},slots:{default:"Any content in this slot will go in the component label"},props:[{prop:"label",type:"String | null",required:!1,default:"null",usage:"Component label. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"leading_cap",type:"String | null",required:!1,default:"null",usage:"Content to display in the leading component cap. Free-form HTML."},{prop:"trailing_cap",type:"String | null",required:!1,default:"null",usage:"Content to display in the trailing component cap. Free-form HTML."},{prop:"value",type:"String | Number | Boolean | null",required:!1,default:"null",usage:"The model binding value of the component."},{prop:"autocomplete",type:"String | null",required:!1,default:"null",usage:"Component autocomplete value."},{prop:"placeholder",type:"String | null",required:!1,default:"null",usage:"Component placeholder text."},{prop:"disabled",type:"Boolean",required:!1,default:"false",usage:"If the component is disabled and non-interactive."},{prop:"rows",type:"String | Number | null",required:!1,default:"null",usage:"The rows (height) of the component."},{prop:"success",type:"String | null",required:!1,default:"null",usage:"Success subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"failure",type:"String | null",required:!1,default:"null",usage:"Failure subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"subtext",type:"String | null",required:!1,default:"null",usage:"Subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."}]}}}});
Vue.component("docs-aui-toggle",{template:`<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-toggle label="test"/><aui-toggle label="checked" :toggled="true"/><aui-toggle label="disabled" :disabled="true"/><aui-toggle label="success" success="success"/><aui-toggle label="failure" failure="failure"/><aui-toggle label="subtext" subtext="subtext"/></template><template #notes><p>All form control components can be bound with v-model.</p><p>All form control components default to full width flex.</p><p>When running a local api, you may tie the disabled state to the api's calling state. Usually the return of this API is so fast that it causes a "flashing" effect on the form. To get around this you should create a delayed overlay property on your form to initiate the disabled state if an API takes longer than ~300ms.</p><p>When the failure state evaluates to true, a watcher triggers to scroll to the highest failed form control component.</p></template></docs-aui-component>`,data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <aui-toggle label="test" />\n  <aui-toggle label="checked" :toggled="true" />\n  <aui-toggle label="disabled" :disabled="true" />\n  <aui-toggle label="success" success="success" />\n  <aui-toggle label="failure" failure="failure" />\n  <aui-toggle label="subtext" subtext="subtext" />\n</div>',events:{"input($event.target.checked)":"When input is registered in the component"},slots:{default:"Any content in this slot will go in the component label"},props:[{prop:"label",type:"String | null",required:!1,default:"null",usage:"Component label. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"value",type:"String | Number | Boolean | null",required:!1,default:"null",usage:"The model binding value of the component."},{prop:"toggled",type:"Boolean | Number",required:!1,default:"false",usage:"If the component is toggled by default."},{prop:"disabled",type:"Boolean",required:!1,default:"false",usage:"If the component is disabled and non-interactive."},{prop:"success",type:"String | null",required:!1,default:"null",usage:"Success subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"failure",type:"String | null",required:!1,default:"null",usage:"Failure subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"subtext",type:"String | null",required:!1,default:"null",usage:"Subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."}]}}}});
Vue.component("docs-aui-wysiwyg",{template:`<docs-aui-component v-bind="options" class="docs-container ds-container primary"><template #examples><aui-wysiwyg label="demo"/><aui-wysiwyg label="disabled" :disabled="true"/><aui-wysiwyg label="success" success="success"/><aui-wysiwyg label="failure" failure="failure"/><aui-wysiwyg label="subtext" subtext="subtext"/></template><template #notes><p>All form control components can be bound with v-model.</p><p>All form control components default to full width flex.</p><p>When running a local api, you may tie the disabled state to the api's calling state. Usually the return of this API is so fast that it causes a "flashing" effect on the form. To get around this you should create a delayed overlay property on your form to initiate the disabled state if an API takes longer than ~300ms.</p><p>When the failure state evaluates to true, a watcher triggers to scroll to the highest failed form control component.</p></template></docs-aui-component>`,data(){return{options:{syntax_js:"new Vue({\n  el: '#test'\n});",syntax_html:'<div id="#test">\n  <aui-wysiwyg label="demo" />\n  <aui-wysiwyg label="disabled" :disabled="true" />\n  <aui-wysiwyg label="success" success="success" />\n  <aui-wysiwyg label="failure" failure="failure" />\n  <aui-wysiwyg label="subtext" subtext="subtext" />\n</div>',events:{"input($event.target.value)":"When input is registered in the component"},slots:{default:"Any content in this slot will go in the component label"},props:[{prop:"label",type:"String | null",required:!1,default:"null",usage:"Component label. This is an alias for the slot content when using plaintext. Slot should be used if custom HTML is required."},{prop:"actions",type:"Array",required:!1,default:["bold","italic","underline","heading1","ulist","olist"],usage:"Pell action bar actions."},{prop:"default_paragraph_separator",type:"String",required:!1,default:"p",usage:"Default HTML tag separator for paragraphs."},{prop:"style_with_css",type:"Boolean",required:!1,default:"true",usage:"If the content should be styled with CSS vs tags."},{prop:"classes",type:"Object",required:!1,default:{actionbar:"pell-actionbar",button:"pell-btn",content:"pell-content",selected:"pell-button-selected"},usage:"Custom Pell widget classes."},{prop:"value",type:"String | Number | Boolean | null",required:!1,default:"null",usage:"The model binding value of the component."},{prop:"disabled",type:"Boolean",required:!1,default:"false",usage:"If the component is disabled and non-interactive."},{prop:"success",type:"String | null",required:!1,default:"null",usage:"Success subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"failure",type:"String | null",required:!1,default:"null",usage:"Failure subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."},{prop:"subtext",type:"String | null",required:!1,default:"null",usage:"Subtext to display under the component. Subtext values override each other in the following order, only one may be present at a time: success > failure > subtext."}]}}}});
Vue.component("docs-aui-component",{template:`<div class="docs-aui-component"><div v-if="syntax_js || syntax_html" class="syntax"><h2>Syntax:</h2><pre><code class="language-js">{{syntax_js}}</code></pre><pre><code class="language-html">{{syntax_html}}</code></pre></div><div class="examples"><h2>Example:</h2><slot name="examples"></slot></div><div v-if="events" class="events"><h2>Events:</h2><table><tr v-for="(value, key) in events" :key="'event-' + key"><td><pre>@{{key}}</pre></td><td>{{value}}</td></tr></table></div><div v-if="slots" class="slots"><h2>Slots:</h2><table><tr v-for="(value, key) in slots" :key="'slot-' + key"><td><pre>{{key}}</pre></td><td>{{value}}</td></tr></table></div><div v-if="$slots.notes" class="notes"><h2>Notes:</h2><slot name="notes"></slot></div><div v-if="props" class="props"><h2>Props:</h2><div class="prop" v-for="(value, key) in props" :key="'prop-' + key"><docs-config-param :param="value.prop" :type="value.type" :default_value="value.default" :required="value.required" :content="value.usage"/></div></div></div>`,props:{syntax_js:{type:null|String,default:null},syntax_html:{type:null|String,default:null},events:{type:null|Object,default:null},slots:{type:null|Object,default:null},props:{type:null|Array,default:null}},mounted(){hljs.initHighlighting.called=!1,hljs.initHighlighting()}});
Vue.component("docs-config-param",{template:'<div class="docs-config-param" :id="param"><h3>{{param}}<docs-link :link="param"/></h3><div class="info"><span v-if="required" class="required">required</span> <span>Type: <code>{{type}}</code></span> <span v-if="default_value">Default: <code>{{default_value}}</code></span></div><slot v-if="!content"/><div v-else v-html="content"/></div>',props:{param:{type:null|String,default:null},required:{type:Boolean,default:!1},type:{type:String,default:"null"},default_value:{type:String,default:"null"},content:{type:null|String,default:null}}});
Vue.component("docs-link",{template:`<a class="docs-link" :href="'#' + link" @click="copy(link)" title="Copy to Clipboard"><i class="fas fa-link"/></a>`,props:{link:{type:null|String,default:null}},methods:{copy(e){const o=document.createElement("textarea");document.body.appendChild(o),o.value=`${location.origin}${location.pathname}#${e}`,o.select(),document.execCommand("copy"),document.body.removeChild(o)}}});
hljs.initHighlightingOnLoad();